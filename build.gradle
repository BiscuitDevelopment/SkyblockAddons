import java.text.NumberFormat
import java.text.ParseException

plugins {
    id 'java'
    id 'net.minecraftforge.gradle.forge' version '2.1-SNAPSHOT'
    id "io.freefair.lombok" version "2.9.5"
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

group = 'codes.biscuit'

ext {
    formattedBuildNumber = ''
    includeRunAttempt = false
    modId = project.name.toLowerCase(Locale.US)
}

// The below line is for version checkers <= 1.4.2
//version = "1.6.1"

// Java plugin settings
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven {
        name 'JitPack'
        url 'https://jitpack.io'
    }
}

dependencies {
    // Discord RPC for Java https://github.com/jagrosh/DiscordIPC
    implementation('com.github.jagrosh:DiscordIPC:e29d6d8') {
        exclude module: 'log4j'
        because 'Different version conflicts with Minecraft\'s Log4J'
    }
    implementation('com.github.BiscuitDevelopment:HypixelLocalizationLib:7122472085') {
        exclude module: 'gson'
        because 'Different version conflicts with Minecraft\'s GSON'
    } 
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
}

sourceSets {
    main {
        // Forge needs resources to be in the same directory as the classes.
        output.resourcesDir = java.outputDir
    }
}

minecraft {
    version = "${project.minecraftVersion}-${project.forgeVersion}"
    runDir = "run"

    mappings = "${project.mappings}"

    /*
    I know this is ugly but the replace function runs super early so I can't put this stuff in a task since it'll always
    end up running after the replace.
     */

    // The MAJOR.MINOR.PATCH part of the mod version
    def modVersionPart = project.version

    if (project.hasProperty('runningOnCi')) {
        if (!project.hasProperty('buildNumber')) {
            throw new InvalidUserDataException('No build number provided for CI build.')
        } else if (!project.hasProperty('runAttempt')) {
            throw new InvalidUserDataException('No run attempt provided for CI build.')
        } else {
            def nf = NumberFormat.getIntegerInstance(Locale.US)
            def buildNumber = project.property('buildNumber')
            def runAttempt = project.property('runAttempt')
            includeRunAttempt = nf.parse(runAttempt as String) > 1

            try {
                if (includeRunAttempt) {
                    project.setProperty('buildNumber', "${buildNumber}.${nf.parse(runAttempt as String) - 1}")
                }
                formattedBuildNumber = nf.format(nf.parse(project.property('buildNumber') as String))
                project.version = "${project.version}+" + project.property('buildNumber')
            } catch (ParseException e) {
                throw new InvalidUserDataException("Build number could not be parsed (${e.message})", e)
            }
        }
    }

    // Replace placeholders in source code
    replace("@VERSION@": modVersionPart,
            "@BUILD_NUMBER@": formattedBuildNumber,
            "@MOD_ACCEPTED@": project.acceptedMinecraftVersions)
    replaceIn("${project.name}.java")
}

tasks.register('copyLicenses', Copy) {
    from(project.projectDir) {
        include('LICENSE')
        include('NOTICE')
        include('dependencyLicenses/**')
    }
    into(sourceSets.main.output.resourcesDir)
}

jar {
    dependsOn copyLicenses

    // Set the archive name here instead of in shadowJar because ForgeGradle needs it when re-obfuscating the jar.
    archiveName = "${project.name}-${project.version}-for-MC-${project.minecraftVersion}.jar"

    manifest.attributes(
            'Manifest-Version': '2.0',
            'Main-Class': 'SkyblockAddonsInstallerFrame',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor' : 'BiscuitDevelopment',
            'Specification-Title': project.name,
            'Specification-Vendor': 'BiscuitDevelopment',
            'Specification-Version': project.version,
            'FMLCorePlugin': "${project.group}.${modId}.tweaker.${project.name}LoadingPlugin",
            'ForceLoadAsMod': true,
            'FMLCorePluginContainsFMLMod': true,
            'ModSide': 'CLIENT',
            'FMLAT': "${modId}_at.cfg"
    )

    // Disable the default jar task and use shadowJar instead to shade the libraries into the jar.
    enabled = false
}

reobfJar {
    dependsOn shadowJar
}

shadowJar {
    archiveName = jar.archiveName

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude('dummyThing')
    exclude('META-INF/maven/')
    exclude('META-INF/nar/')
    exclude('module-info.class')
    exclude('META-INF/versions/')

    // Relocate Discord RPC into the main codebase
    relocate 'com.jagrosh.discordipc', 'codes.biscuit.skyblockaddons.shadow.jagrosh.discordipc'
}

sourceJar {
    enabled = false
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand(version: project.version, mcversion: project.minecraft.version)
    }

    // copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}