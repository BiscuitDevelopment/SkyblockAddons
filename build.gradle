import dev.architectury.pack200.java.Pack200Adapter
import java.text.NumberFormat
import java.text.ParseException

plugins {
    id 'java'
    id 'gg.essential.loom' version '0.10.0.5'
    id 'dev.architectury.architectury-pack200' version '0.1.3'
    id 'io.freefair.lombok' version "6.6.1"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.kyori.blossom' version '1.3.1'
}

group = 'codes.biscuit'

ext {
    formattedBuildNumber = ''
    includeRunAttempt = false
    modId = project.name.toLowerCase(Locale.US)
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

blossom {
    def modVersion = project.version

    if (project.hasProperty('runningOnCi')) {
        if (!project.hasProperty('buildNumber')) {
            throw new InvalidUserDataException('No build number provided for CI build.')
        } else if (!project.hasProperty('runAttempt')) {
            throw new InvalidUserDataException('No run attempt provided for CI build.')
        } else {
            def nf = NumberFormat.getIntegerInstance(Locale.US)
            def buildNumber = project.property('buildNumber')
            def runAttempt = project.property('runAttempt')
            includeRunAttempt = nf.parse(runAttempt as String) > 1

            try {
                if (includeRunAttempt) {
                    project.setProperty('buildNumber', "${buildNumber}.${nf.parse(runAttempt as String) - 1}")
                }
                formattedBuildNumber = nf.format(nf.parse(project.property('buildNumber') as String))
                project.version = "${project.version}+" + project.property('buildNumber')
            } catch (ParseException e) {
                throw new InvalidUserDataException("Build number could not be parsed (${e.message})", e)
            }
        }
    }

    replaceTokenIn('src/main/java/codes/biscuit/skyblockaddons/SkyblockAddons.java')
    replaceToken('@VERSION@', modVersion)
    replaceToken('@MOD_ACCEPTED@', project.minecraftVersion)
    replaceToken('@BUILD_NUMBER@', project.buildNumber)
}

loom {
    //noinspection GroovyAssignabilityCheck
    launchConfigs {
        "client" {
            property('fml.coreMods.load', 'codes.biscuit.skyblockaddons.tweaker.SkyblockAddonsLoadingPlugin')
            property('devauth.enabled', 'true')
        }
    }
    // Change this to one of the other log configs if desired
    log4jConfigs.from(file('log-config.xml'))
    forge {
        pack200Provider.set(new Pack200Adapter())
        accessTransformer('src/main/resources/META-INF/skyblockaddons_at.cfg')
    }
}

sourceSets {
    main {
        // Forge needs resources to be in the same directory as the classes.
        output.resourcesDir = java.classesDirectory
    }
}

configurations.create('bundle')
configurations.implementation.extendsFrom(configurations.named('bundle').get())

repositories {
    mavenCentral()
    maven {
        name 'JitPack'
        url 'https://jitpack.io'
    }
    maven {
        name 'DevAuth'
        url 'https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1'
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraftVersion}")
    mappings("de.oceanlabs.mcp:mcp_stable:${project.mappings}")
    forge("net.minecraftforge:forge:${project.forgeVersion}")
    runtimeOnly('me.djtheredstoner:DevAuth-forge-legacy:1.1.0')

    // Discord RPC for Java https://github.com/jagrosh/DiscordIPC
    bundle('com.github.ILikePlayingGames:DiscordIPC:-SNAPSHOT') {
        exclude module: 'log4j'
        because 'Different version conflicts with Minecraft\'s Log4J'
        exclude module: 'gson'
        because 'Different version conflicts with Minecraft\'s GSON'
    }
    bundle('com.github.BiscuitDevelopment:HypixelLocalizationLib:7122472085') {
        exclude module: 'gson'
        because 'Different version conflicts with Minecraft\'s GSON'
    }
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.encoding = 'UTF-8'
}

tasks.register('copyLicenses', Copy) {
    from(project.projectDir) {
        include('LICENSE')
        include('NOTICE')
        include('dependencyLicenses/**')
    }
    into(sourceSets.main.output.resourcesDir)
}

jar {
    manifest.attributes(
            'Manifest-Version': '2.0',
            'Main-Class': 'SkyblockAddonsInstallerFrame',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor' : 'BiscuitDevelopment',
            'Specification-Title': project.name,
            'Specification-Vendor': 'BiscuitDevelopment',
            'Specification-Version': project.version,
            'FMLCorePlugin': "${project.group}.${modId}.tweaker.${project.name}LoadingPlugin",
            'ForceLoadAsMod': true,
            'FMLCorePluginContainsFMLMod': true,
            'ModSide': 'CLIENT',
            'FMLAT': "${modId}_at.cfg"
    )
}

remapJar {
    from(tasks.shadowJar)
    input.set(tasks.shadowJar.archiveFile.get())

    archiveFileName = "${project.name}-${project.version}-for-MC-${project.minecraftVersion}.jar"
}

processResources {
    dependsOn tasks.copyLicenses
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraftVersion

    // replace stuff in mcmod.info, nothing else
    filesMatching('mcmod.info') {
        // replace version and mcversion
        expand('version': project.version, 'mcversion': project.minecraftVersion)
    }
}

shadowJar {
    configurations = [project.configurations.bundle]
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude('dummyThing')
    exclude('module-info.class')
    exclude('META-INF/versions/')

    // Relocate Discord RPC into the main codebase
    relocate 'com.jagrosh.discordipc', 'shadow.discordipc'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}